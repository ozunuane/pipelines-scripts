name: Build and Deploy to GKE

on:
  pull_request:
    branches:
      - develop
    types: [closed]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: ${{ secrets.GKE_CLUSTER_DEMO }}   # Add your cluster name here.
  GKE_ZONE: ${{ secrets.GKE_ZONE }}   # Add your cluster zone here.
  DEPLOYMENT_NAME: afl-cba-customerinfo-deployment # Add your deployment name here.
  IMAGE: afl/cba-customerinfo
  SUBIMAGE: afl/cba-customerinfo-subscriber
  GRPCIMAGE: afl/cba-customerinfo-grpc
  IMAGE_TAG: $GITHUB_SHA
  CONTEXT: ${{ secrets.GKE_CBA_CONTEXT }}
  GCP_SA_KEY: ${{ secrets.GKE_SA_KEY}}

jobs:
  migrate_database:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Setup dotnet
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.0.x'

      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
         credentials_json: '${{ secrets.GKE_SA_KEY }}'
      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Get Cloud SQL Proxy
        run: |
          wget https://dl.google.com/cloudsql/cloud_sql_proxy.linux.amd64 -O cloud_sql_proxy
          chmod +x cloud_sql_proxy
          sudo mkdir /cloudsql
          sudo chmod 777 /cloudsql
      
      - name: Backup development database
        run: |
          gcloud sql backups create --instance=${{ secrets.GCP_SQL_CLOUD_INSTANCE_NAME_CBA }}
      
      - name: Generate credential file for sql connection
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GKE_SA_KEY }}
        run: |
          touch cred.json
          echo $GOOGLE_APPLICATION_CREDENTIALS >> cred.json
          ls

      - name: Install dotnet-ef
        run: |
          dotnet tool install --global dotnet-ef --version 7.0.1

      - uses: microsoft/variable-substitution@v1 
        name: Replace with Production Values
        with:
            files: 'src/Afl.CBA.CustomerInfo.Api/appsettings.json, src/Afl.CBA.CustomerInfo.Subscriber/appsettings.json, **/appsettings.json, **/appsettings.Development.json'
        env:
            ConnectionStrings.DbConnectionString: ${{ secrets.CBA_DB_CONNECTION_STRING_DEV }}
            ConnectionStrings.SecondaryDbConnectionString: ${{ secrets.CBA_DB_CONNECTION_STRING_DEV }}
            GooglePubSubConfig.Credentials.project_id: ${{ secrets.GKE_PROJECT}}
            GooglePubSubConfig.Credentials.private_key_id: ${{ secrets.GCP_DEV_PRIVATE_KEY_ID}}
            GooglePubSubConfig.Credentials.private_key: ${{ secrets.GCP_DEV_PRIVATE_KEY}}
            GooglePubSubConfig.Credentials.client_email:  ${{ secrets.GCP_DEV_SA_EMAIL}}
            GooglePubSubConfig.Credentials.client_id: ${{ secrets.GCP_DEV_CLIENT_ID}}
            GooglePubSubConfig.Credentials.client_x509_cert_url: ${{ secrets.GCP_DEV_CLIENT_X509_CERT_URL}}
            GooglePubSubConfig.Credentials.token_uri: https://oauth2.googleapis.com/token
            GooglePubSubConfig.Credentials.auth_provider_x509_cert_url: https://www.googleapis.com/oauth2/v1/certs
            GooglePubSubConfig.Credentials.type: "service_account"

      - name: Run Migrations for CBA DB
        run: |
          ./cloud_sql_proxy -dir=/cloudsql -credential_file=cred.json  -instances=inspired-victor-344313:europe-west2:corebankingtest=tcp:5432 & cd src/Afl.CBA.CustomerInfo.Migrations && dotnet ef database update
  
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    needs: migrate_database
    runs-on: ubuntu-latest
    environment: development

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - uses: microsoft/variable-substitution@v1 
      name: Replace with Production Values
      with:
          files: 'src/Afl.CBA.CustomerAccount.Api/appsettings.json, src/Afl.CBA.CustomerAccount.Subscriber/appsettings.json, **/appsettings.json, **/appsettings.Development.json'
      env:
          ConnectionStrings.DbConnectionString: ${{ secrets.CBA_DB_CONNECTION_STRING_DEV_DEPLOYED }}
          ConnectionStrings.SecondaryDbConnectionString: ${{ secrets.CBA_DB_CONNECTION_STRING_DEV_DEPLOYED }}
          RedisConfig.Url: ${{ secrets.REDIS_CBA_URL_DEV }}
          GooglePubSubConfig.Credentials.project_id: ${{ secrets.GKE_PROJECT}}
          GooglePubSubConfig.Credentials.private_key_id: ${{ secrets.GCP_DEV_PRIVATE_KEY_ID}}
          GooglePubSubConfig.Credentials.private_key: ${{ secrets.GCP_DEV_PRIVATE_KEY}}
          GooglePubSubConfig.Credentials.client_email:  ${{ secrets.GCP_DEV_SA_EMAIL}}
          GooglePubSubConfig.Credentials.client_id: ${{ secrets.GCP_DEV_CLIENT_ID}}
          GooglePubSubConfig.Credentials.client_x509_cert_url: ${{ secrets.GCP_DEV_CLIENT_X509_CERT_URL}}
          GooglePubSubConfig.Credentials.token_uri: https://oauth2.googleapis.com/token
          GooglePubSubConfig.Credentials.auth_provider_x509_cert_url: https://www.googleapis.com/oauth2/v1/certs
          GooglePubSubConfig.Credentials.type: "service_account"
          GooglePubSubConfig.Credentials.auth_uri: "https://accounts.google.com/o/oauth2/auth"
          ApiUrls.BankOneApiEndpoint: "http://52.168.85.231/BankOneWebAPI"
          ApiUrls.AuthToken: ${{ secrets.API_URLS_AUTH_TOKEN_DEV }}

    # Setup gcloud CLI
    - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
      with:
        service_account_key: ${{ secrets.GKE_SA_KEY }}
        project_id: ${{ secrets.GKE_PROJECT }}

    # Configure Docker to use the gcloud command-line tool as a credential
    # helper for authentication
    - run: |-
        gcloud --quiet auth configure-docker

    # Get the GKE credentials so we can deploy to the cluster
    - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
        credentials: ${{ secrets.GKE_SA_KEY }}

    # Build the Docker images
    - name: Build main image
      run: |-
        docker build -f src/Afl.CBA.CustomerInfo.Api/Dockerfile\
          --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    - name: Build subscriber image
      run: |-
        docker build -f src/Afl.CBA.CustomerInfo.Subscriber/Dockerfile\
          --tag "gcr.io/$PROJECT_ID/$SUBIMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
        
    - name: Build grpc api image
      run: |-
        docker build -f src/Afl.CBA.CustomerInfo.GrpcApi/Dockerfile\
          --tag "gcr.io/$PROJECT_ID/$GRPCIMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .

    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |-
        docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"
        docker push "gcr.io/$PROJECT_ID/$SUBIMAGE:$GITHUB_SHA"
        docker push "gcr.io/$PROJECT_ID/$GRPCIMAGE:$GITHUB_SHA"



    # Set up kustomize
    - name: Set up Kustomize
      run: |-
        cd dev-deploy
        curl -sfLo kustomize https://github.com/kubernetes-sigs/kustomize/releases/download/v3.1.0/kustomize_3.1.0_linux_amd64
        chmod u+x ./kustomize

    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        cd dev-deploy
        kubectl config set-context $CONTEXT
        ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
        ./kustomize edit set image gcr.io/PROJECT_ID/SUBIMAGE=gcr.io/$PROJECT_ID/$SUBIMAGE:$GITHUB_SHA
        ./kustomize edit set image gcr.io/PROJECT_ID/GRPCIMAGE=gcr.io/$PROJECT_ID/$GRPCIMAGE:$GITHUB_SHA
        kubectl apply -k .
        kubectl rollout status deployment/${{env.DEPLOYMENT_NAME}} --namespace cba
        kubectl get services -o wide
